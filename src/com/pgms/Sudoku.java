package com.pgms;

import java.util.ArrayList;
import java.util.List;
/**
 * 
 * @author justine A J
 *	Program to solve a sudoku
 */

public class Sudoku {
	int g=0;
	static int sum=0;
	int[][] mat=	{		
			{7,0,0,	0,0,2,	8,4,0},
			{0,9,0,	0,1,0,	7,6,0},
			{6,0,0,	7,0,0,	0,0,9},
			
			{0,0,0,	0,4,0,	0,1,8},
			{0,0,1,	0,0,0,	3,0,0},
			{2,5,0,	0,3,0,	0,0,0},
			
			{5,0,0,	0,0,6,	0,0,7},
			{0,3,4,	0,2,0,	0,8,0},
			{0,7,6,	3,0,0,	0,0,1}
		
	};
	int bakMat[][]=new int[9][9];
	
	 List<Integer>subMatVals[]=new List[9];
	@SuppressWarnings("unchecked") List<Integer>rowVals[]=new List[9];
	@SuppressWarnings("unchecked") List<Integer>colVals[]=new List[9];
	
	private void init(int pos){
		
		for(int i=0;i<9;i++)
			for(int j=0;j<9;j++)
				mat[i][j]=mats[pos][i][j];
		
		
		
		
		
				for(int i=0;i<9;i++){
			subMatVals[i]=new ArrayList<Integer>();
			for(int j=1;j<10;j++){
				subMatVals[i].add(j);
			}
		}
				for(int i=0;i<9;i++){
			rowVals[i]=new ArrayList<Integer>();
			for(int j=1;j<10;j++){
				rowVals[i].add(j);
			}
		}		
		for(int i=0;i<9;i++){
			colVals[i]=new ArrayList<Integer>();
			for(int j=1;j<10;j++){
				colVals[i].add(j);
			}
		}		
		for(int i=0;i<9;i++){
			for(int j=0;j<9;j++){
				bakMat[i][j]=mat[i][j];//copying for later use 
				if(mat[i][j]!=0){
					int indexSubMatVals=(i/3)*3+(j/3);
					subMatVals[indexSubMatVals].remove(new Integer(mat[i][j]));
					rowVals[i].remove(new Integer(mat[i][j]));
					colVals[j].remove(new Integer(mat[i][j]));
				}
			}
		}
	}
	
	private void displaySets(){
		
		for(int i=0;i<9;i++){
			if(i%3==0)
				System.out.println();
			for(int j=0;j<9;j++){
				if(j%3==0)
					System.out.print(" ");
				System.out.print(" "+mat[i][j]);
			}
			System.out.print("-->");
			for(int k=0;k<rowVals[i].size();k++){
				System.out.print(rowVals[i].get(k));
			}
			System.out.println();
		}
		
//		System.out.println("------------------------------------------------>");
//		for(int i=0;i<9;i++){
//			for(int j=0;j<9;j++){
//				if(j%3==0)
//					System.out.print(" ");
//				if(colVals[j].size()>i)
//					System.out.print(" "+colVals[j].get(i));
//				else
//					System.out.print("  ");
//			}
//			System.out.println();
//		}
//		
//		System.out.println(" Sub Matrix--->");
//		for(int i=0;i<9;i++){
//				System.out.println(subMatVals[i].toString());
//		}	
	}
	
	@SuppressWarnings("unused")
	private boolean isSuccess(){
		boolean success=true;
		for(int i=0;i<9;i++)
			if(subMatVals[i].size()!=0)
				return false;
		
		return success;
	}
	private boolean canApply(int i,int j,int num){
		if((rowVals[i].contains(num))&&(colVals[j].contains(num)))
			return true;
		
		return false;
	}
	
	private void apply(int i,int j,int num){
		mat[i][j]=num;
		rowVals[i].remove(new Integer(num));
		colVals[j].remove(new Integer(num));
		
		int indexSubMatVals=(i/3)*3+(j/3);
		subMatVals[indexSubMatVals].remove(new Integer(mat[i][j]));
	}
	
	private void remove(int i,int j,int c){
		int num=mat[i][j];
		mat[i][j]=0;
		rowVals[i].add(new Integer(num));
		colVals[j].add(new Integer(num));
		
		int indexSubMatVals=(i/3)*3+(j/3);
		subMatVals[indexSubMatVals].add(c,new Integer(num));
	}
	
	private  void  processCell(int i,int j){
		g++;
		if(i*j>=64){
			if(mat[i][i]==0){
				apply(i,j,subMatVals[i].get(0));
			}
			System.out.println(" i---->"+g);
			System.out.println(" Success->i got the answer ");
			displaySets();
//			/System.exit(0);
//			try{System.in.read();}
//			catch(IOException e){}
			int s=new Integer(""+mat[0][0]+mat[0][1]+mat[0][2]);
			System.out.println("temporary s---->"+s);
			sum=sum+s;
			throw new RuntimeException();
		}
		int nextI=i+(j/8);
		int nextJ=(j+1)%9;
		
		if(bakMat[i][j]!=0){
			processCell(nextI,nextJ);
			return;
		}
		int indexSubMatVals=(i/3)*3+(j/3);
		List<Integer> values=subMatVals[indexSubMatVals];
		for(int c=0;c<values.size();c++){
			int val=values.get(c);
			if(canApply(i,j,val)){
				apply(i,j,val);         // may throw CuncurrentModificationException
				processCell(nextI,nextJ);
					remove(i,j,c);
			}
		}
	}
	private void start(int pos){
		init(pos);
//		displaySets();
		processCell(0,0);
		System.out.println(" I can't solve this sudoku ");
		
		displaySets();
	}
	public static void main(String args[]){
		for(int  pos=0;pos<50;pos++){
			try{
				System.out.println("pos----->"+pos);
				new Sudoku().start(pos);
			}
			catch(Exception e){}
		}
		System.out.println("------>"+Sudoku.sum);
	}



int[][][] mats={{
		{0,0,3,0,2,0,6,0,0,},	
		{9,0,0,3,0,5,0,0,1,},
		{0,0,1,8,0,6,4,0,0,},
		{0,0,8,1,0,2,9,0,0,},
		{7,0,0,0,0,0,0,0,8,},
		{0,0,6,7,0,8,2,0,0,},
		{0,0,2,6,0,9,5,0,0,},
		{8,0,0,2,0,3,0,0,9,},
		{0,0,5,0,1,0,3,0,0,},
		},{
		{2,0,0,0,8,0,3,0,0,},
		{0,6,0,0,7,0,0,8,4,},
		{0,3,0,5,0,0,2,0,9,},
		{0,0,0,1,0,5,4,0,8,},
		{0,0,0,0,0,0,0,0,0,},
		{4,0,2,7,0,6,0,0,0,},
		{3,0,1,0,0,7,0,4,0,},
		{7,2,0,0,4,0,0,6,0,},
		{0,0,4,0,1,0,0,0,3,},
		},{
		{0,0,0,0,0,0,9,0,7,},
		{0,0,0,4,2,0,1,8,0,},
		{0,0,0,7,0,5,0,2,6,},
		{1,0,0,9,0,4,0,0,0,},
		{0,5,0,0,0,0,0,4,0,},
		{0,0,0,5,0,7,0,0,9,},
		{9,2,0,1,0,8,0,0,0,},
		{0,3,4,0,5,9,0,0,0,},
		{5,0,7,0,0,0,0,0,0,},
		},{
		{0,3,0,0,5,0,0,4,0,},
		{0,0,8,0,1,0,5,0,0,},
		{4,6,0,0,0,0,0,1,2,},
		{0,7,0,5,0,2,0,8,0,},
		{0,0,0,6,0,3,0,0,0,},
		{0,4,0,1,0,9,0,3,0,},
		{2,5,0,0,0,0,0,9,8,},
		{0,0,1,0,2,0,6,0,0,},
		{0,8,0,0,6,0,0,2,0,},
		},{
		{0,2,0,8,1,0,7,4,0,},
		{7,0,0,0,0,3,1,0,0,},
		{0,9,0,0,0,2,8,0,5,},
		{0,0,9,0,4,0,0,8,7,},
		{4,0,0,2,0,8,0,0,3,},
		{1,6,0,0,3,0,2,0,0,},
		{3,0,2,7,0,0,0,6,0,},
		{0,0,5,6,0,0,0,0,8,},
		{0,7,6,0,5,1,0,9,0,},
		},{
		{1,0,0,9,2,0,0,0,0,},
		{5,2,4,0,1,0,0,0,0,},
		{0,0,0,0,0,0,0,7,0,},
		{0,5,0,0,0,8,1,0,2,},
		{0,0,0,0,0,0,0,0,0,},
		{4,0,2,7,0,0,0,9,0,},
		{0,6,0,0,0,0,0,0,0,},
		{0,0,0,0,3,0,9,4,5,},
		{0,0,0,0,7,1,0,0,6,},
		},{
		{0,4,3,0,8,0,2,5,0,},
		{6,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,1,0,9,4,},
		{9,0,0,0,0,4,0,7,0,},
		{0,0,0,6,0,8,0,0,0,},
		{0,1,0,2,0,0,0,0,3,},
		{8,2,0,5,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,5,},
		{0,3,4,0,9,0,7,1,0,},
		},{
		{4,8,0,0,0,6,9,0,2,},
		{0,0,2,0,0,8,0,0,1,},
		{9,0,0,3,7,0,0,6,0,},
		{8,4,0,0,1,0,2,0,0,},
		{0,0,3,7,0,4,1,0,0,},
		{0,0,1,0,6,0,0,4,9,},
		{0,2,0,0,8,5,0,0,7,},
		{7,0,0,9,0,0,6,0,0,},
		{6,0,9,2,0,0,0,1,8,},
		},{
		{0,0,0,9,0,0,0,0,2,},
		{0,5,0,1,2,3,4,0,0,},
		{0,3,0,0,0,0,1,6,0,},
		{9,0,8,0,0,0,0,0,0,},
		{0,7,0,0,0,0,0,9,0,},
		{0,0,0,0,0,0,2,0,5,},
		{0,9,1,0,0,0,0,5,0,},
		{0,0,7,4,3,9,0,2,0,},
		{4,0,0,0,0,7,0,0,0,},
		},{
		{0,0,1,9,0,0,0,0,3,},
		{9,0,0,7,0,0,1,6,0,},
		{0,3,0,0,0,5,0,0,7,},
		{0,5,0,0,0,0,0,0,9,},
		{0,0,4,3,0,2,6,0,0,},
		{2,0,0,0,0,0,0,7,0,},
		{6,0,0,1,0,0,0,3,0,},
		{0,4,2,0,0,7,0,0,6,},
		{5,0,0,0,0,6,8,0,0,},
		},{
		{0,0,0,1,2,5,4,0,0,},
		{0,0,8,4,0,0,0,0,0,},
		{4,2,0,8,0,0,0,0,0,},
		{0,3,0,0,0,0,0,9,5,},
		{0,6,0,9,0,2,0,1,0,},
		{5,1,0,0,0,0,0,6,0,},
		{0,0,0,0,0,3,0,4,9,},
		{0,0,0,0,0,7,2,0,0,},
		{0,0,1,2,9,8,0,0,0,},
		},{
		{0,6,2,3,4,0,7,5,0,},
		{1,0,0,0,0,5,6,0,0,},
		{5,7,0,0,0,0,0,4,0,},
		{0,0,0,0,9,4,8,0,0,},
		{4,0,0,0,0,0,0,0,6,},
		{0,0,5,8,3,0,0,0,0,},
		{0,3,0,0,0,0,0,9,1,},
		{0,0,6,4,0,0,0,0,7,},
		{0,5,9,0,8,3,2,6,0,},
		},{
		{3,0,0,0,0,0,0,0,0,},
		{0,0,5,0,0,9,0,0,0,},
		{2,0,0,5,0,4,0,0,0,},
		{0,2,0,0,0,0,7,0,0,},
		{1,6,0,0,0,0,0,5,8,},
		{7,0,4,3,1,0,6,0,0,},
		{0,0,0,8,9,0,1,0,0,},
		{0,0,0,0,6,7,0,8,0,},
		{0,0,0,0,0,5,4,3,7,},
		},{
		{6,3,0,0,0,0,0,0,0,},
		{0,0,0,5,0,0,0,0,8,},
		{0,0,5,6,7,4,0,0,0,},
		{0,0,0,0,2,0,0,0,0,},
		{0,0,3,4,0,1,0,2,0,},
		{0,0,0,0,0,0,3,4,5,},
		{0,0,0,0,0,7,0,0,4,},
		{0,8,0,3,0,0,9,0,2,},
		{9,4,7,1,0,0,0,8,0,},
		},{
		{0,0,0,0,2,0,0,4,0,},
		{0,0,8,0,3,5,0,0,0,},
		{0,0,0,0,7,0,6,0,2,},
		{0,3,1,0,4,6,9,7,0,},
		{2,0,0,0,0,0,0,0,0,},
		{0,0,0,5,0,1,2,0,3,},
		{0,4,9,0,0,0,7,3,0,},
		{0,0,0,0,0,0,0,1,0,},
		{8,0,0,0,0,4,0,0,0,},
		},{
		{3,6,1,0,2,5,9,0,0,},
		{0,8,0,9,6,0,0,1,0,},
		{4,0,0,0,0,0,0,5,7,},
		{0,0,8,0,0,0,4,7,1,},
		{0,0,0,6,0,3,0,0,0,},
		{2,5,9,0,0,0,8,0,0,},
		{7,4,0,0,0,0,0,0,5,},
		{0,2,0,0,1,8,0,6,0,},
		{0,0,5,4,7,0,3,2,9,},
		},{
		{0,5,0,8,0,7,0,2,0,},
		{6,0,0,0,1,0,0,9,0,},
		{7,0,2,5,4,0,0,0,6,},
		{0,7,0,0,2,0,3,0,1,},
		{5,0,4,0,0,0,9,0,8,},
		{1,0,3,0,8,0,0,7,0,},
		{9,0,0,0,7,6,2,0,5,},
		{0,6,0,0,9,0,0,0,3,},
		{0,8,0,1,0,3,0,4,0,},
		},{
		{0,8,0,0,0,5,0,0,0,},
		{0,0,0,0,0,3,4,5,7,},
		{0,0,0,0,7,0,8,0,9,},
		{0,6,0,4,0,0,9,0,3,},
		{0,0,7,0,1,0,5,0,0,},
		{4,0,8,0,0,7,0,2,0,},
		{9,0,1,0,2,0,0,0,0,},
		{8,4,2,3,0,0,0,0,0,},
		{0,0,0,1,0,0,0,8,0,},
		},{
		{0,0,3,5,0,2,9,0,0,},
		{0,0,0,0,4,0,0,0,0,},
		{1,0,6,0,0,0,3,0,5,},
		{9,0,0,2,5,1,0,0,8,},
		{0,7,0,4,0,8,0,3,0,},
		{8,0,0,7,6,3,0,0,1,},
		{3,0,8,0,0,0,1,0,4,},
		{0,0,0,0,2,0,0,0,0,},
		{0,0,5,1,0,4,8,0,0,},
		},{
		{0,0,0,0,0,0,0,0,0,},
		{0,0,9,8,0,5,1,0,0,},
		{0,5,1,9,0,7,4,2,0,},
		{2,9,0,4,0,1,0,6,5,},
		{0,0,0,0,0,0,0,0,0,},
		{1,4,0,5,0,8,0,9,3,},
		{0,2,6,7,0,9,5,8,0,},
		{0,0,5,1,0,3,6,0,0,},
		{0,0,0,0,0,0,0,0,0,},
		},{
		{0,2,0,0,3,0,0,9,0,},
		{0,0,0,9,0,7,0,0,0,},
		{9,0,0,2,0,8,0,0,5,},
		{0,0,4,8,0,6,5,0,0,},
		{6,0,7,0,0,0,2,0,8,},
		{0,0,3,1,0,2,9,0,0,},
		{8,0,0,6,0,5,0,0,7,},
		{0,0,0,3,0,9,0,0,0,},
		{0,3,0,0,2,0,0,5,0,},
		},{
		{0,0,5,0,0,0,0,0,6,},
		{0,7,0,0,0,9,0,2,0,},
		{0,0,0,5,0,0,1,0,7,},
		{8,0,4,1,5,0,0,0,0,},
		{0,0,0,8,0,3,0,0,0,},
		{0,0,0,0,9,2,8,0,5,},
		{9,0,7,0,0,6,0,0,0,},
		{0,3,0,4,0,0,0,1,0,},
		{2,0,0,0,0,0,6,0,0,},
		},{
		{0,4,0,0,0,0,0,5,0,},
		{0,0,1,9,4,3,6,0,0,},
		{0,0,9,0,0,0,3,0,0,},
		{6,0,0,0,5,0,0,0,2,},
		{1,0,3,0,0,0,5,0,6,},
		{8,0,0,0,2,0,0,0,7,},
		{0,0,5,0,0,0,2,0,0,},
		{0,0,2,4,3,6,7,0,0,},
		{0,3,0,0,0,0,0,4,0,},
		},{
		{0,0,4,0,0,0,0,0,0,},
		{0,0,0,0,3,0,0,0,2,},
		{3,9,0,7,0,0,0,8,0,},
		{4,0,0,0,0,9,0,0,1,},
		{2,0,9,8,0,1,3,0,7,},
		{6,0,0,2,0,0,0,0,8,},
		{0,1,0,0,0,8,0,5,3,},
		{9,0,0,0,4,0,0,0,0,},
		{0,0,0,0,0,0,8,0,0,},
		},{
		{3,6,0,0,2,0,0,8,9,},
		{0,0,0,3,6,1,0,0,0,},
		{0,0,0,0,0,0,0,0,0,},
		{8,0,3,0,0,0,6,0,2,},
		{4,0,0,6,0,3,0,0,7,},
		{6,0,7,0,0,0,1,0,8,},
		{0,0,0,0,0,0,0,0,0,},
		{0,0,0,4,1,8,0,0,0,},
		{9,7,0,0,3,0,0,1,4,},
		},{
		{5,0,0,4,0,0,0,6,0,},
		{0,0,9,0,0,0,8,0,0,},
		{6,4,0,0,2,0,0,0,0,},
		{0,0,0,0,0,1,0,0,8,},
		{2,0,8,0,0,0,5,0,1,},
		{7,0,0,5,0,0,0,0,0,},
		{0,0,0,0,9,0,0,8,4,},
		{0,0,3,0,0,0,6,0,0,},
		{0,6,0,0,0,3,0,0,2,},
		},{
		{0,0,7,2,5,6,4,0,0,},
		{4,0,0,0,0,0,0,0,5,},
		{0,1,0,0,3,0,0,6,0,},
		{0,0,0,5,0,8,0,0,0,},
		{0,0,8,0,6,0,2,0,0,},
		{0,0,0,1,0,7,0,0,0,},
		{0,3,0,0,7,0,0,9,0,},
		{2,0,0,0,0,0,0,0,4,},
		{0,0,6,3,1,2,7,0,0,},
		},{
		{0,0,0,0,0,0,0,0,0,},
		{0,7,9,0,5,0,1,8,0,},
		{8,0,0,0,0,0,0,0,7,},
		{0,0,7,3,0,6,8,0,0,},
		{4,5,0,7,0,8,0,9,6,},
		{0,0,3,5,0,2,7,0,0,},
		{7,0,0,0,0,0,0,0,5,},
		{0,1,6,0,3,0,4,2,0,},
		{0,0,0,0,0,0,0,0,0,},
		},{
		{0,3,0,0,0,0,0,8,0,},
		{0,0,9,0,0,0,5,0,0,},
		{0,0,7,5,0,9,2,0,0,},
		{7,0,0,1,0,5,0,0,8,},
		{0,2,0,0,9,0,0,3,0,},
		{9,0,0,4,0,2,0,0,1,},
		{0,0,4,2,0,7,1,0,0,},
		{0,0,2,0,0,0,8,0,0,},
		{0,7,0,0,0,0,0,9,0,},
		},{
		{2,0,0,1,7,0,6,0,3,},
		{0,5,0,0,0,0,1,0,0,},
		{0,0,0,0,0,6,0,7,9,},
		{0,0,0,0,4,0,7,0,0,},
		{0,0,0,8,0,1,0,0,0,},
		{0,0,9,0,5,0,0,0,0,},
		{3,1,0,4,0,0,0,0,0,},
		{0,0,5,0,0,0,0,6,0,},
		{9,0,6,0,3,7,0,0,2,},
		},{
		{0,0,0,0,0,0,0,8,0,},
		{8,0,0,7,0,1,0,4,0,},
		{0,4,0,0,2,0,0,3,0,},
		{3,7,4,0,0,0,9,0,0,},
		{0,0,0,0,3,0,0,0,0,},
		{0,0,5,0,0,0,3,2,1,},
		{0,1,0,0,6,0,0,5,0,},
		{0,5,0,8,0,2,0,0,6,},
		{0,8,0,0,0,0,0,0,0,},
		},{
		{0,0,0,0,0,0,0,8,5,},
		{0,0,0,2,1,0,0,0,9,},
		{9,6,0,0,8,0,1,0,0,},
		{5,0,0,8,0,0,0,1,6,},
		{0,0,0,0,0,0,0,0,0,},
		{8,9,0,0,0,6,0,0,7,},
		{0,0,9,0,7,0,0,5,2,},
		{3,0,0,0,5,4,0,0,0,},
		{4,8,0,0,0,0,0,0,0,},
		},{
		{6,0,8,0,7,0,5,0,2,},
		{0,5,0,6,0,8,0,7,0,},
		{0,0,2,0,0,0,3,0,0,},
		{5,0,0,0,9,0,0,0,6,},
		{0,4,0,3,0,2,0,5,0,},
		{8,0,0,0,5,0,0,0,3,},
		{0,0,5,0,0,0,2,0,0,},
		{0,1,0,7,0,4,0,9,0,},
		{4,0,9,0,6,0,7,0,1,},
		},{
		{0,5,0,0,1,0,0,4,0,},
		{1,0,7,0,0,0,6,0,2,},
		{0,0,0,9,0,5,0,0,0,},
		{2,0,8,0,3,0,5,0,1,},
		{0,4,0,0,7,0,0,2,0,},
		{9,0,1,0,8,0,4,0,6,},
		{0,0,0,4,0,1,0,0,0,},
		{3,0,4,0,0,0,7,0,9,},
		{0,2,0,0,6,0,0,1,0,},
		},{
		{0,5,3,0,0,0,7,9,0,},
		{0,0,9,7,5,3,4,0,0,},
		{1,0,0,0,0,0,0,0,2,},
		{0,9,0,0,8,0,0,1,0,},
		{0,0,0,9,0,7,0,0,0,},
		{0,8,0,0,3,0,0,7,0,},
		{5,0,0,0,0,0,0,0,3,},
		{0,0,7,6,4,1,2,0,0,},
		{0,6,1,0,0,0,9,4,0,},
		},{
		{0,0,6,0,8,0,3,0,0,},
		{0,4,9,0,7,0,2,5,0,},
		{0,0,0,4,0,5,0,0,0,},
		{6,0,0,3,1,7,0,0,4,},
		{0,0,7,0,0,0,8,0,0,},
		{1,0,0,8,2,6,0,0,9,},
		{0,0,0,7,0,2,0,0,0,},
		{0,7,5,0,4,0,1,9,0,},
		{0,0,3,0,9,0,6,0,0,},
		},{
		{0,0,5,0,8,0,7,0,0,},
		{7,0,0,2,0,4,0,0,5,},
		{3,2,0,0,0,0,0,8,4,},
		{0,6,0,1,0,5,0,4,0,},
		{0,0,8,0,0,0,5,0,0,},
		{0,7,0,8,0,3,0,1,0,},
		{4,5,0,0,0,0,0,9,1,},
		{6,0,0,5,0,8,0,0,7,},
		{0,0,3,0,1,0,6,0,0,},
		},{
		{0,0,0,9,0,0,8,0,0,},
		{1,2,8,0,0,6,4,0,0,},
		{0,7,0,8,0,0,0,6,0,},
		{8,0,0,4,3,0,0,0,7,},
		{5,0,0,0,0,0,0,0,9,},
		{6,0,0,0,7,9,0,0,8,},
		{0,9,0,0,0,4,0,1,0,},
		{0,0,3,6,0,0,2,8,4,},
		{0,0,1,0,0,7,0,0,0,},
		},{
		{0,0,0,0,8,0,0,0,0,},
		{2,7,0,0,0,0,0,5,4,},
		{0,9,5,0,0,0,8,1,0,},
		{0,0,9,8,0,6,4,0,0,},
		{0,2,0,4,0,3,0,6,0,},
		{0,0,6,9,0,5,1,0,0,},
		{0,1,7,0,0,0,6,2,0,},
		{4,6,0,0,0,0,0,3,8,},
		{0,0,0,0,9,0,0,0,0,},
		},{
		{0,0,0,6,0,2,0,0,0,},
		{4,0,0,0,5,0,0,0,1,},
		{0,8,5,0,1,0,6,2,0,},
		{0,3,8,2,0,6,7,1,0,},
		{0,0,0,0,0,0,0,0,0,},
		{0,1,9,4,0,7,3,5,0,},
		{0,2,6,0,4,0,5,3,0,},
		{9,0,0,0,2,0,0,0,7,},
		{0,0,0,8,0,9,0,0,0,},
		},{
		{0,0,0,9,0,0,0,0,2,},
		{0,5,0,1,2,3,4,0,0,},
		{0,3,0,0,0,0,1,6,0,},
		{9,0,8,0,0,0,0,0,0,},
		{0,7,0,0,0,0,0,9,0,},
		{0,0,0,0,0,0,2,0,5,},
		{0,9,1,0,0,0,0,5,0,},
		{0,0,7,4,3,9,0,2,0,},
		{4,0,0,0,0,7,0,0,0,},
		},{
		{3,8,0,0,0,0,0,0,0,},
		{0,0,0,4,0,0,7,8,5,},
		{0,0,9,0,2,0,3,0,0,},
		{0,6,0,0,9,0,0,0,0,},
		{8,0,0,3,0,2,0,0,9,},
		{0,0,0,0,4,0,0,7,0,},
		{0,0,1,0,7,0,5,0,0,},
		{4,9,5,0,0,6,0,0,0,},
		{0,0,0,0,0,0,0,9,2,},
		},{
		{0,0,0,1,5,8,0,0,0,},
		{0,0,2,0,6,0,8,0,0,},
		{0,3,0,0,0,0,0,4,0,},
		{0,2,7,0,3,0,5,1,0,},
		{0,0,0,0,0,0,0,0,0,},
		{0,4,6,0,8,0,7,9,0,},
		{0,5,0,0,0,0,0,8,0,},
		{0,0,4,0,7,0,1,0,0,},
		{0,0,0,3,2,5,0,0,0,},
		},{
		{0,1,0,5,0,0,2,0,0,},
		{9,0,0,0,0,1,0,0,0,},
		{0,0,2,0,0,8,0,3,0,},
		{5,0,0,0,3,0,0,0,7,},
		{0,0,8,0,0,0,5,0,0,},
		{6,0,0,0,8,0,0,0,4,},
		{0,4,0,1,0,0,7,0,0,},
		{0,0,0,7,0,0,0,0,6,},
		{0,0,3,0,0,4,0,5,0,},
		},{
		{0,8,0,0,0,0,0,4,0,},
		{0,0,0,4,6,9,0,0,0,},
		{4,0,0,0,0,0,0,0,7,},
		{0,0,5,9,0,4,6,0,0,},
		{0,7,0,6,0,8,0,3,0,},
		{0,0,8,5,0,2,1,0,0,},
		{9,0,0,0,0,0,0,0,5,},
		{0,0,0,7,8,1,0,0,0,},
		{0,6,0,0,0,0,0,1,0,},
		},{
		{9,0,4,2,0,0,0,0,7,},
		{0,1,0,0,0,0,0,0,0,},
		{0,0,0,7,0,6,5,0,0,},
		{0,0,0,8,0,0,0,9,0,},
		{0,2,0,9,0,4,0,6,0,},
		{0,4,0,0,0,2,0,0,0,},
		{0,0,1,6,0,7,0,0,0,},
		{0,0,0,0,0,0,0,3,0,},
		{3,0,0,0,0,5,7,0,2,},
		},{
		{0,0,0,7,0,0,8,0,0,},
		{0,0,6,0,0,0,0,3,1,},
		{0,4,0,0,0,2,0,0,0,},
		{0,2,4,0,7,0,0,0,0,},
		{0,1,0,0,3,0,0,8,0,},
		{0,0,0,0,6,0,2,9,0,},
		{0,0,0,8,0,0,0,7,0,},
		{8,6,0,0,0,0,5,0,0,},
		{0,0,2,0,0,6,0,0,0,},
		},{
		{0,0,1,0,0,7,0,9,0,},
		{5,9,0,0,8,0,0,0,1,},
		{0,3,0,0,0,0,0,8,0,},
		{0,0,0,0,0,5,8,0,0,},
		{0,5,0,0,6,0,0,2,0,},
		{0,0,4,1,0,0,0,0,0,},
		{0,8,0,0,0,0,0,3,0,},
		{1,0,0,0,2,0,0,7,9,},
		{0,2,0,7,0,0,4,0,0,},
		},{
		{0,0,0,0,0,3,0,1,7,},
		{0,1,5,0,0,9,0,0,8,},
		{0,6,0,0,0,0,0,0,0,},
		{1,0,0,0,0,7,0,0,0,},
		{0,0,9,0,0,0,2,0,0,},
		{0,0,0,5,0,0,0,0,4,},
		{0,0,0,0,0,0,0,2,0,},
		{5,0,0,6,0,0,3,4,0,},
		{3,4,0,2,0,0,0,0,0,},
		},{
		{3,0,0,2,0,0,0,0,0,},
		{0,0,0,1,0,7,0,0,0,},
		{7,0,6,0,3,0,5,0,0,},
		{0,7,0,0,0,9,0,8,0,},
		{9,0,0,0,2,0,0,0,4,},
		{0,1,0,8,0,0,0,5,0,},
		{0,0,9,0,4,0,3,0,1,},
		{0,0,0,7,0,2,0,0,0,},
		{0,0,0,0,0,8,0,0,6,},
		}  }       ;
}
/*
 * int[][] mat=	{		
			{0,3,0,	0,0,0,	0,8,0},
			{0,0,7,	0,3,0,	2,0,0},
			{8,0,2,	0,0,0,	6,7,0},
			
			{0,0,0,	0,1,0,	0,9,0},
			{0,6,0,	7,0,3,	0,1,0},
			{0,4,0,	0,2,0,	0,0,0},
			
			{0,2,8,	0,0,0,	7,0,5},
			{0,0,3,	0,4,0,	8,0,0},
			{0,1,0,	0,0,0,	0,3,0}
		
	};
	
	
	int[][] mat=	{		
			{4,0,0,	0,0,0,	0,3,6},
			{0,2,0,	0,0,4,	0,1,0},
			{8,0,0,	1,0,7,	0,0,0},
			
			{0,0,8,	4,0,0,	1,0,0},
			{0,6,0,	0,0,0,	0,7,0},
			{0,0,4,	0,0,2,	9,0,0},
			
			{0,0,0,	9,0,8,	0,0,7},
			{0,8,0,	3,0,0,	0,4,0},
			{6,5,0,	0,0,0,	0,0,3}
		
	};
	
	int[][] mat=	{		
			{0,0,3,	7,5,9,	4,0,0},
			{0,4,0,	0,0,0,	0,2,0},
			{0,1,0,	3,0,2,	0,9,0},
			
			{4,0,0,	0,1,0,	0,0,3},
			{0,0,6,	5,0,4,	9,0,0},
			{9,0,0,	0,2,0,	0,0,5},
			
			{0,7,0,	6,0,1,	0,8,0},
			{0,6,0,	0,0,0,	0,3,0},
			{0,0,4,	2,7,3,	6,0,0}
		
	};
	
	int[][] mat=	{		
			{1,0,0,	4,0,0,	0,6,0},
			{0,0,0,	0,0,0,	2,0,0},
			{3,0,0,	8,0,6,	7,0,0},
			
			{9,0,0,	1,4,0,	8,3,0},
			{0,0,0,	0,0,0,	0,0,0},
			{0,3,4,	0,7,2,	0,0,5},
			
			{0,0,1,	2,0,7,	0,0,8},
			{0,0,9,	0,0,0,	0,0,0},
			{0,2,0,	0,0,9,	0,0,7}
		
	};
	
	int[][] mat=	{		
			{6,0,0,	0,0,5,	7,0,0},
			{0,0,0,	0,0,0,	0,5,0},
			{0,0,0,	6,8,0,	0,2,9},
			
			{0,6,0,	0,0,0,	2,3,0},
			{0,0,3,	2,0,8,	5,0,0},
			{0,8,1,	0,0,0,	0,9,0},
			
			{9,7,0,	0,4,2,	0,0,0},
			{0,3,0,	0,0,0,	0,0,0},
			{0,0,4,	9,0,0,	0,0,3}
		
	};
 * */
